Language name candidates

ultimatum
will
compel
tyrannize
wish


Program example

In Firefox and Google Chrome
saying [create] new tab types Command-t
saying close tab types Command-w
saying tab number:1..9 types Command-number
saying search Google for types Command-t Command-l "Google.com" Return

Everywhere
saying down number:1-15 types repeat number (DownArrow)
saying menu number:1-9 types Control-F2 repeat number (RightArrow) DownArrow
saying matrix number1:1-9 number2:1-9 types repeat number2 (repeat number1 ("-") "\n")


Grammar in BNF form

Expression = CCL
CCL = CC | CC CCL
CC = Context CL

Context = "Everywhere" | "In" PL
PL = Program-Name | Program-Name " and " PL

CL = Command | Command CL
Command = "saying" Trigger Action

Trigger = WL
WL = W | W " " WL
W = Option | VarDeclaration | Word
Option = "[" OL "]"
OL = WL | WL "|" OL
VarDeclaration = Word ":" Range
Range = CN RS CN
CN = Char | Number
RS = "-" | ".."

Action = Verb ActionContent
Verb = "types" | "opens" | "runs"
ActionContent = AL
AL = A | A " " AL
A = Repeat | Variable | Keystroke | StringLit
Repeat = "repeat" Variable "(" AL ")" 
Keystroke = Key | ML "-" Key | ML "-" Variable
ML = M | M "-" ML
M = "Command" | "Control" | "Shift" | "Option"
Key = Char | Digit |
	"DownArrow" | "LeftArrow" | "RightArrow" | "UpArrow" | "Delete" | "End" | "Esc" | 
	"F1" | "F2" | "F3" | "F4" | "F5" | "F6" | "F7" | "F8" | "F9" | "F10" | "F11" | "F12" | 
	"Home" | "PageDown" | "PageUp" | "Return" | "Space" | "Tab"
StringLit = """ String """

On terminal symbols:
Word: represents the word that can be dictated and recognized by the dictation software
Char/Number/String: here these represent informally characters, numbers and strings. A more precise definition and consistency checking will be described in a further document.




Semantics

A program in this language consists of a list of commands preceded by the context in which these commands can be executed. The context can be global (in which case the commands can be executed on any program) or can be one or more programs. A command contains basically 2 parts: a trigger and an action. The trigger is the text the user should dictate in the action is what should be executed once the dictation is detected.

The trigger may contain a variable number of optional words and variable declarations. The optional words use a traditional syntax (using square brackets and |'s) and may be nested inside other options. Variables in this language are very limited. They can only consist of a range of numbers or letters. This limitation arises from the fact that for each possible value in the range, a Dragon Dictate command will be created.

The action consists of a verb describing the type of action and the content of the action. For example, if the verb is "types" the action will consist of typing a set of keystrokes, if the verb is "opens" the action will consist of opening a given program. Variables declared in the trigger may be used to determine the number of repetitions in a repeat block or simply as part of the content the action. A repeat block will repeat a certain set of keystrokes or text a given number of times and may also be nested inside other repeat blocks. For example: "saying scroll a bit types repeat 5 (DownArrow)" Will be compiled to 5 DownArrow's. A repeat block can also be used with a variable. For example: "saying down number:1-5 types repeat number (DownArrow)" is syntactic sugar for:
saying down 1 types repeat 1 (DownArrow)
saying down 2 types repeat 2 (DownArrow)
saying down 3 types repeat 3 (DownArrow)
saying down 4 types repeat 4 (DownArrow)
saying down 5 types repeat 5 (DownArrow) 

The same expansion happens every time a variable is used. Variables can also be used to modify keystrokes. For example: Tab-Variable will be expanded to the respective keystrokes.

The program will be compiled into an XML file that can be used imported into Dragon Dictate. Because using this format one cannot define real variables the commands that contain variables have to be expanded internally creating one command for each possible variable value.

Language features

- Optional words in command trigger. Options can be nested inside other options.
- Commands may contain simple variable ranges.
- Multiple action types (keystrokes, open program, run script)
- Repeatable actions.


How the language solves the problem

Because the creation of commands in Dragon Dictate is typically done using the user interface, having a high-level language that can be compiled into commands increases dramatically the usefulness of this tool. Moreover, having a concise syntax to express optional words in the commands and commands containing variables simplifies the creation of commands and reduces the amount of repetition when creating commands. 
