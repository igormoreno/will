== Problem ==

The use of dictation softwares is increasingly popular and indeed they worked remarkably well with natural text. But unfortunately they don't work so well if one wishes to write code or just interact with the computer in general. After suffering from RSI for more than a year, I decided to try to use a dictation software as a way to interact with the computer without using my hands. I've been using Dragon Dictate for two months now and it is very frustrating to do almost anything in the computer that is not dictating natural text.

Dragon Dictate allows the user to create personalized commands as a way to make it faster and easier to perform common tasks. The user can then say a set of words and have Dragon perform a specific task. This task can be for example press a set of keystrokes or execute a shell script. That can make interacting with the computer by voice much more productive. Unfortunately, the user can only create commands using Dragon's UI so for each command several steps have to be performed and they required the use of the mouse which is something particularly slow to do with dictation.


== Proposed Solution ==

Create a DSL to add commands to Dragon Dictate.


== Non-goals ==

The creation of a speech to text engine is completely out of scope.


== Key challenges ==

The Mac version of Dragon does not provide an API like the Windows version does. The only way to add commands is via the "import/export commands" functionality accessible via dragons UI. It imports files in a very opaque XML format. There seems to be no documentation about this format available to users so a good deal of "reverse engineering" and trial and error will be required in order to understand what the parts of this XML mean and how to manipulate it.


== Resources ==

A documentation describing the XML format of the file used to import commands would be very helpful. I'll try to contact the company that develops Dragon to ask for that but based on information available in various forums online the specifics of this file format are kept "close sourced" by the company.

Even better would be to have access to an API that could be used to directly interact with Dragon but that seems not to be available either.


== Related work ==

The Windows version of Dragon provides an API that relies on a Windows-specific interprocess communication API in C/C++. There are a lot of projects that programmatically interact with the Windows version of Dragon. The most popular of them seems to be dragonfly that provides a high-level interface to personalize Dragon using Python. Dragonfly uses Natlink, that creates a Python API that calls the low-level interprocess communication API. Unfortunately the Mac version of Dragon does not provide an API so none of these projects apply to it.

There is a project in GitHub of the tool to create Dragon Dictate command files using scala (https://github.com/siderakis/dragon-fire). Neither the project nor the source code is documented. I haven't tested it yet but it seems to work only to create commands that execute keystrokes. It creates a DSL embedded in scala to do it but the syntax uses identifiers such as ">>" there are neither very explanatory nor easy to write using a dictation software.

There is a commercial close-source software currently in public beta that interfaces with Dragon Dictate to provide a faster and more productive way to code by voice. It is not clear how exactly they interface with Dragon Dictate. The product costs $300 and the price does not include Dragon Dictate, which has to be purchased separately. That's a considerable amount of money specially considering that Dragon Dictate itself costs already $200.


== Milestones ==

The milestones of the project are already described in:
http://usi-pl.github.io/hw/project/project.pdf

Given the short period of time available to design and implement the solution I believe a more detailed timeline would not be realistic.


== Project Evaluation ==

A working project should be able to take as input a description of the command, including the phrase to be dictated and what should it do, and generate an XML file that can be imported into Dragon so that the user can dictate a phrase and have the specified action performed.